// Generated by CoffeeScript 1.6.3
(function() {
  var __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    __slice = [].slice,
    __hasProp = {}.hasOwnProperty;

  this.EnvyVideo = (function() {
    EnvyVideo.prototype._video = undefined;

    EnvyVideo.prototype._wrap = undefined;

    EnvyVideo.prototype._defaults = {
      'debug': false,
      'prefix': 'envy-video'
    };

    EnvyVideo.prototype.status = {
      'hasControls': false,
      'hasStarted': false,
      'isPlaying': false
    };

    function EnvyVideo(options) {
      this.options = options;
      this.hasStarted = __bind(this.hasStarted, this);
      this.init();
    }

    EnvyVideo.prototype.destroy = function() {
      if (this.status.hasControls === true) {
        this._video.setAttribute('controls', '');
      }
      this._video.removeAttribute('data-action');
      this._video.parentNode.removeChild(this._video);
      this._wrap.parentNode.insertBefore(this._video, this._wrap);
      this._wrap.parentNode.removeChild(this._wrap);
      this._video = undefined;
      this._wrap = undefined;
      return this.status = {
        'hasControls': false,
        'hasStarted': false,
        'isPlaying': false
      };
    };

    EnvyVideo.prototype.init = function() {
      var action, actions, btn, ctrl, ctrls, errors, img, playhead, poster, progress, sel, _i, _len,
        _this = this;
      this.options = EnvyVideo.merge({}, this._defaults, this.options);
      errors = {
        'initFail': "EnvyVideo failed: could not find a <video> element matching `" + this.options.video + "`.",
        'initMissing': "Please select a <video> element to style by setting EnvyVideo({ 'video' : videoElementOrSelector }).",
        'units': "You specified a unit measurement. Please omit units such as px and em."
      };
      ctrls = {
        'next': {},
        'playPause': {},
        'speed': {},
        'quality': {}
      };
      if (this.options.video !== undefined) {
        switch (typeof this.options.video) {
          case 'array':
          case 'object':
            if (this.options.video.nodeName === 'VIDEO') {
              this._video = this.options.video;
            } else {
              if (this.options.video[0].nodeName === 'VIDEO') {
                this._video = this.options.video[0];
              } else {
                EnvyVideo.throwError(errors.initFail);
              }
            }
            break;
          case 'string':
            sel = document.querySelector(this.options.video);
            if (sel) {
              this._video = sel;
            } else {
              EnvyVideo.throwError(errors.initFail);
            }
            break;
          default:
            EnvyVideo.throwError(errors.initFail);
        }
        this._wrap = document.createElement('div');
        this._wrap.className = this.options.prefix + '--wrap';
        this._video.parentNode.insertBefore(this._wrap, this._video);
        this._video.parentNode.removeChild(this._video);
        this._wrap.appendChild(this._video);
        this.setWidth(this._video.width);
        this.setHeight(this._video.height);
        img = this._video.getAttribute('poster');
        if (img) {
          poster = document.createElement('div');
          poster.className = this.options.prefix + '--poster';
          poster.style.backgroundImage = 'url(' + img + ')';
          poster.setAttribute('data-action', 'play');
          poster.addEventListener('click', (function(e) {
            return _this.bind(e);
          }), true);
          poster.innerHTML = '<div class="' + this.options.prefix + '--overlay"></div>';
          this._wrap.appendChild(poster);
        }
        if (this._video.getAttribute('controls') !== null) {
          this._video.removeAttribute('controls');
          this.status.hasControls = true;
        }
        this._video.setAttribute('data-action', 'playPause');
        this._video.addEventListener('click', (function(e) {
          return _this.bind(e);
        }), true);
        ctrl = document.createElement('div');
        ctrl.className = this.options.prefix + '--ctrl';
        this._wrap.appendChild(ctrl);
        actions = [
          {
            'type': 'playPause',
            'container': 'button',
            'className': this.options.prefix + '--btn ' + this.options.prefix + '--playPause',
            'innerHTML': '<i class="' + this.options.prefix + '--icn ' + this.options.prefix + '--icn--playPause"></i>'
          }, {
            'type': 'scrub',
            'container': 'div',
            'className': this.options.prefix + '--scrub',
            'innerHTML': '<div class="' + this.options.prefix + '--timeline"></div><div class="' + this.options.prefix + '--progress"></div><div class="' + this.options.prefix + '--playhead"></div>'
          }, {
            'type': 'quality',
            'container': 'button',
            'className': this.options.prefix + '--btn ' + this.options.prefix + '--quality',
            'innerHTML': '<i class="' + this.options.prefix + '--icn ' + this.options.prefix + '--icn--quality"></i>'
          }, {
            'type': 'fs',
            'container': 'button',
            'className': this.options.prefix + '--btn ' + this.options.prefix + '--fs',
            'innerHTML': '<i class="' + this.options.prefix + '--icn ' + this.options.prefix + '--icn--fs"></i>'
          }
        ];
        for (_i = 0, _len = actions.length; _i < _len; _i++) {
          action = actions[_i];
          btn = document.createElement(action.container);
          btn.className = action.className;
          btn.setAttribute('data-action', action.type);
          btn.innerHTML = action.innerHTML;
          btn.addEventListener('click', (function(e) {
            return _this.bind(e);
          }), true);
          ctrl.appendChild(btn);
          EnvyVideo.bind(action, btn);
        }
        progress = document.querySelector('.' + this.options.prefix + '--progress');
        playhead = document.querySelector('.' + this.options.prefix + '--playhead');
        this._video.addEventListener('timeupdate', function(e) {
          var pct;
          pct = ((e.srcElement.currentTime / e.srcElement.duration) * 100).toFixed(2);
          progress.style.width = pct + '%';
          return playhead.style.left = pct + '%';
        });
        return document.onkeydown = function(e) {
          switch (e.keyCode) {
            case 32:
              _this.playPause();
              return e.preventDefault();
          }
        };
      } else {
        return EnvyVideo.throwError(errors.initMissing);
      }
    };

    EnvyVideo.prototype.setHeight = function(h) {
      this._wrap.style.height = h + 'px';
      return this._video.setAttribute('height', h);
    };

    EnvyVideo.prototype.setWidth = function(w) {
      this._wrap.style.width = w + 'px';
      return this._video.setAttribute('width', w);
    };

    EnvyVideo.prototype.pause = function() {
      document.title = document.title.replace('▸ ', '');
      this.status.isPlaying = false;
      this._video.pause();
      return this.removeClass(this._wrap, 'is--playing');
    };

    EnvyVideo.prototype.play = function() {
      this.status.isPlaying = true;
      this._video.play();
      this.addClass(this._wrap, 'is--playing');
      document.title = '▸ ' + document.title;
      if (!this.status.hasStarted) {
        this.status.hasStarted = true;
        return this.addClass(this._wrap, 'has--started');
      }
    };

    EnvyVideo.prototype.playPause = function() {
      if (!this.status.isPlaying) {
        return this.play();
      } else {
        return this.pause();
      }
    };

    EnvyVideo.prototype.beforeReady = function(callback) {
      return typeof callback === "function" ? callback(callback) : void 0;
    };

    EnvyVideo.prototype.onPause = function(callback) {
      return typeof callback === "function" ? callback(callback) : void 0;
    };

    EnvyVideo.prototype.onPlay = function(callback) {
      return typeof callback === "function" ? callback(callback) : void 0;
    };

    EnvyVideo.prototype.onReady = function(callback) {
      return typeof callback === "function" ? callback(callback) : void 0;
    };

    EnvyVideo.prototype.isPaused = function() {
      return !this.status.isPlaying;
    };

    EnvyVideo.prototype.isPlaying = function() {
      return this.status.isPlaying;
    };

    EnvyVideo.prototype.hasStarted = function() {
      return this.status.hasStarted;
    };

    EnvyVideo.prototype.addClass = function(el, addThis) {
      var current;
      current = el.className;
      if (current.indexOf(' ' + addThis) === -1) {
        return el.className = current + ' ' + addThis;
      }
    };

    EnvyVideo.prototype.bind = function(event) {
      var action;
      if (typeof event === 'object') {
        action = event.target.getAttribute('data-action') ? event.target.getAttribute('data-action') : event.target.parentNode.getAttribute('data-action');
        switch (action) {
          case 'play':
            return this.play();
          case 'playPause':
            return this.playPause();
        }
      }
    };

    EnvyVideo.merge = function() {
      var extension, extensions, property, target, _i, _len;
      target = arguments[0], extensions = 2 <= arguments.length ? __slice.call(arguments, 1) : [];
      for (_i = 0, _len = extensions.length; _i < _len; _i++) {
        extension = extensions[_i];
        for (property in extension) {
          if (!__hasProp.call(extension, property)) continue;
          target[property] = extension[property];
        }
      }
      return target;
    };

    EnvyVideo.prototype.removeClass = function(el, removeThis) {
      var current;
      current = el.className;
      if (current.indexOf(' ' + removeThis) !== -1) {
        current = ' ' + current.replace(' ' + removeThis, '');
        return el.className = current.replace(/^\s\s*/, '').replace(/\s\s*$/, '');
      }
    };

    EnvyVideo.setOptions = function(options) {
      this.options = merge({}, this.defaults, options);
      return this;
    };

    EnvyVideo.throwError = function(msg) {
      console.log(msg);
      return false;
    };

    return EnvyVideo;

  })();

}).call(this);
